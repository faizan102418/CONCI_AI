# conci-ai-assistant/backend/src/core/models.py
# This file defines Pydantic models for API request and response data validation,
# now including models for the centralized dashboard tasks.

from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime

# --- Existing Request Models (from previous steps) ---

class VoiceCommandRequest(BaseModel):
    pass # Audio file upload handled by FastAPI's `UploadFile`


class TextCommandRequest(BaseModel):
    text: str = Field(
        ...,
        min_length=1,
        example="Book a spa slot for tomorrow at 3 PM."
    )

class SpaBookingRequest(BaseModel):
    date: str = Field(..., example="2025-07-22", description="Date of the spa booking in YYYY-MM-DD format.")
    time: str = Field(..., example="15:00", description="Time of the spa booking in HH:MM format (24-hour).")
    service: str = Field(..., example="Deep Tissue Massage", description="Type of spa service requested.")
    customer_name: str = Field(..., example="John Doe", description="Name of the customer booking the service.")


class HotSOSCreationRequest(BaseModel):
    description: str = Field(
        ...,
        min_length=10,
        example="Fix leaking faucet in Room 305.",
        description="Detailed description of the task to be created."
    )
    priority: str = Field(
        "medium",
        example="high",
        pattern="^(low|medium|high)$",
        description="Priority level of the task (low, medium, or high)."
    )

# --- New Models for Centralized Dashboard ---

class StaffMember(BaseModel):
    """Represents a staff member who can be assigned a task."""
    id: str = Field(..., example="staff_001", description="Unique identifier for the staff member.")
    name: str = Field(..., example="Alice Smith", description="Name of the staff member.")
    role: str = Field(..., example="Housekeeping", description="Role of the staff member.")

class Task(BaseModel):
    """Represents a guest request or a task for staff."""
    id: str = Field(..., example="task_abc123", description="Unique identifier for the task.")
    guest_request: str = Field(..., example="I need fresh towels in room 203.", description="The original guest's request.")
    room_number: Optional[str] = Field(None, example="203", description="The room number associated with the request.")
    category: str = Field(..., example="Housekeeping", description="Category of the task (e.g., Housekeeping, Maintenance, Room Service).")
    status: str = Field("pending", example="pending", pattern="^(pending|assigned|completed|cancelled)$", description="Current status of the task.")
    priority: str = Field("medium", example="medium", pattern="^(low|medium|high)$", description="Priority level of the task.")
    assigned_to: Optional[StaffMember] = Field(None, description="Staff member assigned to this task.")
    created_at: datetime = Field(default_factory=datetime.now, description="Timestamp when the task was created.")
    assigned_at: Optional[datetime] = Field(None, description="Timestamp when the task was assigned.")
    completed_at: Optional[datetime] = Field(None, description="Timestamp when the task was completed.")

class TaskCreateRequest(BaseModel):
    """Request model for creating a new task from a guest request."""
    guest_request: str = Field(..., example="I need fresh towels in room 203.", description="The original guest's request.")
    room_number: Optional[str] = Field(None, example="203", description="The room number associated with the request.")
    category: str = Field(..., example="Housekeeping", description="Category of the task (e.g., Housekeeping, Maintenance, Room Service).")
    priority: str = Field("medium", example="medium", pattern="^(low|medium|high)$", description="Priority level of the task.")

class TaskUpdateRequest(BaseModel):
    """Request model for updating an existing task."""
    status: Optional[str] = Field(None, example="assigned", pattern="^(pending|assigned|completed|cancelled)$", description="New status for the task.")
    assigned_to_id: Optional[str] = Field(None, example="staff_001", description="ID of the staff member to assign the task to.")
    # You could add other fields here if they can be updated (e.g., priority, description)

# --- Existing Response Models (from previous steps) ---

class VoiceCommandResponse(BaseModel):
    transcribed_text: str = Field(..., description="The text transcribed from the user's audio.")
    llm_response_text: str = Field(..., description="The text response generated by the LLM.")
    audio_response_b64: Optional[str] = Field(
        None,
        description="Base64 encoded audio (e.g., WAV or MP3) of the LLM's response. Null if no audio is returned."
    )

class TextCommandResponse(BaseModel):
    input_text: str = Field(..., description="The original text input from the user.")
    llm_response_text: str = Field(..., description="The text response generated by the LLM.")

class OperationResponse(BaseModel):
    status: str = Field("success", example="success", description="Status of the operation (e.g., 'success', 'failure').")
    message: str = Field(..., example="Operation completed successfully.", description="A descriptive message about the operation's outcome.")